// <auto-generated />
using System;
using HorseEggs.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HorseEggs.Infrastructure.Migrations
{
    [DbContext(typeof(AppDBContext))]
    partial class AppDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HorseEggs.Core.Entities.Competence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Competence");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = "30a1f01d-c1b4-4252-8662-746626dec2eb",
                            Code = "ЗК1",
                            Description = "ЗК1",
                            Name = "ЗК1"
                        },
                        new
                        {
                            Id = 2,
                            AppUserId = "30a1f01d-c1b4-4252-8662-746626dec2eb",
                            Code = "ЗК2",
                            Description = "ЗК2",
                            Name = "ЗК2"
                        },
                        new
                        {
                            Id = 3,
                            AppUserId = "30a1f01d-c1b4-4252-8662-746626dec2eb",
                            Code = "ЗК3",
                            Description = "ЗК3",
                            Name = "ЗК3"
                        },
                        new
                        {
                            Id = 4,
                            AppUserId = "30a1f01d-c1b4-4252-8662-746626dec2eb",
                            Code = "ЗК4",
                            Description = "ЗК4",
                            Name = "ЗК4"
                        },
                        new
                        {
                            Id = 5,
                            AppUserId = "30a1f01d-c1b4-4252-8662-746626dec2eb",
                            Code = "ЗК5",
                            Description = "ЗК5",
                            Name = "ЗК5"
                        });
                });

            modelBuilder.Entity("HorseEggs.Core.Entities.Competence_EP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompetenceId")
                        .HasColumnType("int");

                    b.Property<int>("EducationalProgramId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompetenceId");

                    b.HasIndex("EducationalProgramId");

                    b.ToTable("Competence_EP");
                });

            modelBuilder.Entity("HorseEggs.Core.Entities.Competences_SEP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompetenceId")
                        .HasColumnType("int");

                    b.Property<int>("StandartEducationalProgramId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompetenceId");

                    b.HasIndex("StandartEducationalProgramId");

                    b.ToTable("Competences_SEPs");
                });

            modelBuilder.Entity("HorseEggs.Core.Entities.EducationalComponent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EducationalComponents");
                });

            modelBuilder.Entity("HorseEggs.Core.Entities.EducationalComponent_Competences_EP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompetenceId")
                        .HasColumnType("int");

                    b.Property<int>("EducationalComponentId")
                        .HasColumnType("int");

                    b.Property<int>("EducationalProgramId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompetenceId");

                    b.HasIndex("EducationalComponentId");

                    b.HasIndex("EducationalProgramId");

                    b.ToTable("EducationalComponent_Competences_EPs");
                });

            modelBuilder.Entity("HorseEggs.Core.Entities.EducationalComponent_EducationalProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EducationalComponentId")
                        .HasColumnType("int");

                    b.Property<int>("EducationalProgramId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EducationalComponentId");

                    b.HasIndex("EducationalProgramId");

                    b.ToTable("EducationalComponent_EducationalProgram");
                });

            modelBuilder.Entity("HorseEggs.Core.Entities.EducationalComponent_ProgramLearningOutcomes_EP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EducationalComponentId")
                        .HasColumnType("int");

                    b.Property<int>("EducationalProgramId")
                        .HasColumnType("int");

                    b.Property<int>("ProgramLearningOutcomesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EducationalComponentId");

                    b.HasIndex("EducationalProgramId");

                    b.HasIndex("ProgramLearningOutcomesId");

                    b.ToTable("EducationalComponent_ProgramLearningOutcomes_EPs");
                });

            modelBuilder.Entity("HorseEggs.Core.Entities.EducationalProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StandartEducationalProgramId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("StandartEducationalProgramId");

                    b.ToTable("EducationalPrograms");
                });

            modelBuilder.Entity("HorseEggs.Core.Entities.ProgramLearningOutcomes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("ProgramLearningOutcomes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = "30a1f01d-c1b4-4252-8662-746626dec2eb",
                            Code = "ПРН1",
                            Description = "ПРН1",
                            Name = "ПРН1"
                        },
                        new
                        {
                            Id = 2,
                            AppUserId = "30a1f01d-c1b4-4252-8662-746626dec2eb",
                            Code = "ПРН2",
                            Description = "ПРН2",
                            Name = "ПРН2"
                        },
                        new
                        {
                            Id = 3,
                            AppUserId = "30a1f01d-c1b4-4252-8662-746626dec2eb",
                            Code = "ПРН3",
                            Description = "ПРН3",
                            Name = "ПРН3"
                        },
                        new
                        {
                            Id = 4,
                            AppUserId = "30a1f01d-c1b4-4252-8662-746626dec2eb",
                            Code = "ПРН4",
                            Description = "ПРН4",
                            Name = "ПРН4"
                        },
                        new
                        {
                            Id = 5,
                            AppUserId = "30a1f01d-c1b4-4252-8662-746626dec2eb",
                            Code = "ПРН5",
                            Description = "ПРН5",
                            Name = "ПРН5"
                        });
                });

            modelBuilder.Entity("HorseEggs.Core.Entities.ProgramLearningOutcomes_EP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EducationalProgramId")
                        .HasColumnType("int");

                    b.Property<int>("ProgramLearningOutcomesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EducationalProgramId");

                    b.HasIndex("ProgramLearningOutcomesId");

                    b.ToTable("ProgramLearningOutcomes_EP");
                });

            modelBuilder.Entity("HorseEggs.Core.Entities.ProgramLearningOutcomes_SEP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProgramLearningOutcomesId")
                        .HasColumnType("int");

                    b.Property<int>("StandartEducationalProgramId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProgramLearningOutcomesId");

                    b.HasIndex("StandartEducationalProgramId");

                    b.ToTable("ProgramLearningOutcomes_SEPs");
                });

            modelBuilder.Entity("HorseEggs.Core.Entities.Specialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("Specialties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "121",
                            Name = "Інженерія програмного забезпечення"
                        },
                        new
                        {
                            Id = 2,
                            Code = "122",
                            Name = "Комп’ютерні науки"
                        },
                        new
                        {
                            Id = 3,
                            Code = "123",
                            Name = "Комп’ютерна інженерія"
                        },
                        new
                        {
                            Id = 4,
                            Code = "124",
                            Name = "Системний аналіз"
                        },
                        new
                        {
                            Id = 5,
                            Code = "125",
                            Name = "Кібербезпека"
                        });
                });

            modelBuilder.Entity("HorseEggs.Core.Entities.StandartEducationalProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("SpecialtyId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("StandartEducationalPrograms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "1",
                            SpecialtyId = 1,
                            Year = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "2",
                            SpecialtyId = 2,
                            Year = 2
                        },
                        new
                        {
                            Id = 3,
                            Name = "3",
                            SpecialtyId = 3,
                            Year = 3
                        },
                        new
                        {
                            Id = 4,
                            Name = "4",
                            SpecialtyId = 4,
                            Year = 4
                        },
                        new
                        {
                            Id = 5,
                            Name = "5",
                            SpecialtyId = 5,
                            Year = 5
                        });
                });

            modelBuilder.Entity("HorseEggs.Core.Entities.Token.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("JwtId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "18d4496c-b925-4872-9579-d1e9c3f4c3e1",
                            Name = "Ministry",
                            NormalizedName = "MINISTRY"
                        },
                        new
                        {
                            Id = "6c3d1549-1ebc-464d-bf3f-eb591eef712f",
                            Name = "University",
                            NormalizedName = "UNIVERSITY"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "30a1f01d-c1b4-4252-8662-746626dec2eb",
                            RoleId = "18d4496c-b925-4872-9579-d1e9c3f4c3e1"
                        },
                        new
                        {
                            UserId = "c516c67c-83d2-4507-9829-efc83105763e",
                            RoleId = "6c3d1549-1ebc-464d-bf3f-eb591eef712f"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HorseEggs.Core.Entities.AppUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.HasDiscriminator().HasValue("AppUser");

                    b.HasData(
                        new
                        {
                            Id = "30a1f01d-c1b4-4252-8662-746626dec2eb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0f3c4e78-af6b-471c-9ba4-54e6e7b6ecbb",
                            Email = "ministry@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MINISTRY@EMAIL.COM",
                            NormalizedUserName = "MINISTRY@EMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBwnxd3nH7K/G+D+QvNLOKytRfCZR4q5MSzerIoI806Hmkky7T7W2RMnw8CHwBt3RA==",
                            PhoneNumber = "+xx(xxx)xxx-xx-xx",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "2731435e-7c72-4827-aa65-d53527b857dd",
                            TwoFactorEnabled = false,
                            UserName = "ministry@email.com"
                        },
                        new
                        {
                            Id = "c516c67c-83d2-4507-9829-efc83105763e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3bfdeb86-c1f1-4d3e-b90c-01de9f9144e8",
                            Email = "university@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "UNIVERSITY@EMAIL.COM",
                            NormalizedUserName = "UNIVERSITY@EMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDa3hTC5Grd27agvSIUnm/RTeAJjMxzOjoa48e6tB8FdIxklMEOc3aLlRHdVr4XHUw==",
                            PhoneNumber = "+xx(xxx)xxx-xx-xx",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "c7e039c2-8861-42ee-b31c-3630981b5b34",
                            TwoFactorEnabled = false,
                            UserName = "university@email.com"
                        });
                });

            modelBuilder.Entity("HorseEggs.Core.Entities.Competence", b =>
                {
                    b.HasOne("HorseEggs.Core.Entities.AppUser", "AppUser")
                        .WithMany("Competences")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("HorseEggs.Core.Entities.Competence_EP", b =>
                {
                    b.HasOne("HorseEggs.Core.Entities.Competence", "Competence")
                        .WithMany("Competence_EPs")
                        .HasForeignKey("CompetenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HorseEggs.Core.Entities.EducationalProgram", "EducationalProgram")
                        .WithMany("Competence_EPs")
                        .HasForeignKey("EducationalProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competence");

                    b.Navigation("EducationalProgram");
                });

            modelBuilder.Entity("HorseEggs.Core.Entities.Competences_SEP", b =>
                {
                    b.HasOne("HorseEggs.Core.Entities.Competence", "Competence")
                        .WithMany("Competences_SEPs")
                        .HasForeignKey("CompetenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HorseEggs.Core.Entities.StandartEducationalProgram", "StandartEducationalProgram")
                        .WithMany("Competences_SEPs")
                        .HasForeignKey("StandartEducationalProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competence");

                    b.Navigation("StandartEducationalProgram");
                });

            modelBuilder.Entity("HorseEggs.Core.Entities.EducationalComponent_Competences_EP", b =>
                {
                    b.HasOne("HorseEggs.Core.Entities.Competence", "Competence")
                        .WithMany("EducationalComponent_Competences_EPs")
                        .HasForeignKey("CompetenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HorseEggs.Core.Entities.EducationalComponent", "EducationalComponent")
                        .WithMany("EducationalComponent_Competences_EPs")
                        .HasForeignKey("EducationalComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HorseEggs.Core.Entities.EducationalProgram", "EducationalProgram")
                        .WithMany("EducationalComponent_Competences_EPs")
                        .HasForeignKey("EducationalProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competence");

                    b.Navigation("EducationalComponent");

                    b.Navigation("EducationalProgram");
                });

            modelBuilder.Entity("HorseEggs.Core.Entities.EducationalComponent_EducationalProgram", b =>
                {
                    b.HasOne("HorseEggs.Core.Entities.EducationalComponent", "EducationalComponent")
                        .WithMany("EducationalComponent_EducationalPrograms")
                        .HasForeignKey("EducationalComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HorseEggs.Core.Entities.EducationalProgram", "EducationalProgram")
                        .WithMany("EducationalComponent_EducationalPrograms")
                        .HasForeignKey("EducationalProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EducationalComponent");

                    b.Navigation("EducationalProgram");
                });

            modelBuilder.Entity("HorseEggs.Core.Entities.EducationalComponent_ProgramLearningOutcomes_EP", b =>
                {
                    b.HasOne("HorseEggs.Core.Entities.EducationalComponent", "EducationalComponent")
                        .WithMany("EducationalComponent_ProgramLearningOutcomes_EPs")
                        .HasForeignKey("EducationalComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HorseEggs.Core.Entities.EducationalProgram", "EducationalProgram")
                        .WithMany("EducationalComponent_ProgramLearningOutcomes_EPs")
                        .HasForeignKey("EducationalProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HorseEggs.Core.Entities.ProgramLearningOutcomes", "ProgramLearningOutcomes")
                        .WithMany("EducationalComponent_ProgramLearningOutcomes_EPs")
                        .HasForeignKey("ProgramLearningOutcomesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EducationalComponent");

                    b.Navigation("EducationalProgram");

                    b.Navigation("ProgramLearningOutcomes");
                });

            modelBuilder.Entity("HorseEggs.Core.Entities.EducationalProgram", b =>
                {
                    b.HasOne("HorseEggs.Core.Entities.AppUser", "AppUser")
                        .WithMany("EducationalPrograms")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HorseEggs.Core.Entities.StandartEducationalProgram", "StandartEducationalProgram")
                        .WithMany("EducationalPrograms")
                        .HasForeignKey("StandartEducationalProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("StandartEducationalProgram");
                });

            modelBuilder.Entity("HorseEggs.Core.Entities.ProgramLearningOutcomes", b =>
                {
                    b.HasOne("HorseEggs.Core.Entities.AppUser", "AppUser")
                        .WithMany("ProgramLearningOutcomes")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("HorseEggs.Core.Entities.ProgramLearningOutcomes_EP", b =>
                {
                    b.HasOne("HorseEggs.Core.Entities.EducationalProgram", "EducationalProgram")
                        .WithMany("ProgramLearningOutcomes_EPs")
                        .HasForeignKey("EducationalProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HorseEggs.Core.Entities.ProgramLearningOutcomes", "ProgramLearningOutcomes")
                        .WithMany("ProgramLearningOutcomes_EPs")
                        .HasForeignKey("ProgramLearningOutcomesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EducationalProgram");

                    b.Navigation("ProgramLearningOutcomes");
                });

            modelBuilder.Entity("HorseEggs.Core.Entities.ProgramLearningOutcomes_SEP", b =>
                {
                    b.HasOne("HorseEggs.Core.Entities.ProgramLearningOutcomes", "ProgramLearningOutcomes")
                        .WithMany("ProgramLearningOutcomes_SEPs")
                        .HasForeignKey("ProgramLearningOutcomesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HorseEggs.Core.Entities.StandartEducationalProgram", "StandartEducationalProgram")
                        .WithMany("ProgramLearningOutcomes_SEPs")
                        .HasForeignKey("StandartEducationalProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProgramLearningOutcomes");

                    b.Navigation("StandartEducationalProgram");
                });

            modelBuilder.Entity("HorseEggs.Core.Entities.StandartEducationalProgram", b =>
                {
                    b.HasOne("HorseEggs.Core.Entities.Specialty", "Specialty")
                        .WithMany("StandartEducationalPrograms")
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Specialty");
                });

            modelBuilder.Entity("HorseEggs.Core.Entities.Token.RefreshToken", b =>
                {
                    b.HasOne("HorseEggs.Core.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HorseEggs.Core.Entities.Competence", b =>
                {
                    b.Navigation("Competence_EPs");

                    b.Navigation("Competences_SEPs");

                    b.Navigation("EducationalComponent_Competences_EPs");
                });

            modelBuilder.Entity("HorseEggs.Core.Entities.EducationalComponent", b =>
                {
                    b.Navigation("EducationalComponent_Competences_EPs");

                    b.Navigation("EducationalComponent_EducationalPrograms");

                    b.Navigation("EducationalComponent_ProgramLearningOutcomes_EPs");
                });

            modelBuilder.Entity("HorseEggs.Core.Entities.EducationalProgram", b =>
                {
                    b.Navigation("Competence_EPs");

                    b.Navigation("EducationalComponent_Competences_EPs");

                    b.Navigation("EducationalComponent_EducationalPrograms");

                    b.Navigation("EducationalComponent_ProgramLearningOutcomes_EPs");

                    b.Navigation("ProgramLearningOutcomes_EPs");
                });

            modelBuilder.Entity("HorseEggs.Core.Entities.ProgramLearningOutcomes", b =>
                {
                    b.Navigation("EducationalComponent_ProgramLearningOutcomes_EPs");

                    b.Navigation("ProgramLearningOutcomes_EPs");

                    b.Navigation("ProgramLearningOutcomes_SEPs");
                });

            modelBuilder.Entity("HorseEggs.Core.Entities.Specialty", b =>
                {
                    b.Navigation("StandartEducationalPrograms");
                });

            modelBuilder.Entity("HorseEggs.Core.Entities.StandartEducationalProgram", b =>
                {
                    b.Navigation("Competences_SEPs");

                    b.Navigation("EducationalPrograms");

                    b.Navigation("ProgramLearningOutcomes_SEPs");
                });

            modelBuilder.Entity("HorseEggs.Core.Entities.AppUser", b =>
                {
                    b.Navigation("Competences");

                    b.Navigation("EducationalPrograms");

                    b.Navigation("ProgramLearningOutcomes");
                });
#pragma warning restore 612, 618
        }
    }
}
